/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: transaction.proto */

#ifndef PROTOBUF_C_transaction_2eproto__INCLUDED
#define PROTOBUF_C_transaction_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _TransactionHeader TransactionHeader;
typedef struct _Transaction Transaction;
typedef struct _TransactionList TransactionList;


/* --- enums --- */


/* --- messages --- */

struct  _TransactionHeader
{
  ProtobufCMessage base;
  /*
   * Public key for the client who added this transaction to a batch
   */
  char *batcher_public_key;
  /*
   * A list of transaction signatures that describe the transactions that
   * must be processed before this transaction can be valid
   */
  size_t n_dependencies;
  char **dependencies;
  /*
   * The family name correlates to the transaction processor's family name
   * that this transaction can be processed on, for example 'intkey'
   */
  char *family_name;
  /*
   * The family version correlates to the transaction processor's family
   * version that this transaction can be processed on, for example "1.0"
   */
  char *family_version;
  /*
   * A list of addresses that are given to the context manager and control
   * what addresses the transaction processor is allowed to read from.
   */
  size_t n_inputs;
  char **inputs;
  /*
   * A random string that provides uniqueness for transactions with
   * otherwise identical fields.
   */
  char *nonce;
  /*
   * A list of addresses that are given to the context manager and control
   * what addresses the transaction processor is allowed to write to.
   */
  size_t n_outputs;
  char **outputs;
  /*
   *The sha512 hash of the encoded payload
   */
  char *payload_sha512;
  /*
   * Public key for the client that signed the TransactionHeader
   */
  char *signer_public_key;
};
#define TRANSACTION_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transaction_header__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Transaction
{
  ProtobufCMessage base;
  /*
   * The serialized version of the TransactionHeader
   */
  ProtobufCBinaryData header;
  /*
   * The signature derived from signing the header
   */
  char *header_signature;
  /*
   * The payload is the encoded family specific information of the
   * transaction. Example cbor({'Verb': verb, 'Name': name,'Value': value})
   */
  ProtobufCBinaryData payload;
};
#define TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transaction__descriptor) \
    , {0,NULL}, (char *)protobuf_c_empty_string, {0,NULL} }


/*
 * A simple list of transactions that needs to be serialized before
 * it can be transmitted to a batcher.
 */
struct  _TransactionList
{
  ProtobufCMessage base;
  size_t n_transactions;
  Transaction **transactions;
};
#define TRANSACTION_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&transaction_list__descriptor) \
    , 0,NULL }


/* TransactionHeader methods */
void   transaction_header__init
                     (TransactionHeader         *message);
size_t transaction_header__get_packed_size
                     (const TransactionHeader   *message);
size_t transaction_header__pack
                     (const TransactionHeader   *message,
                      uint8_t             *out);
size_t transaction_header__pack_to_buffer
                     (const TransactionHeader   *message,
                      ProtobufCBuffer     *buffer);
TransactionHeader *
       transaction_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transaction_header__free_unpacked
                     (TransactionHeader *message,
                      ProtobufCAllocator *allocator);
/* Transaction methods */
void   transaction__init
                     (Transaction         *message);
size_t transaction__get_packed_size
                     (const Transaction   *message);
size_t transaction__pack
                     (const Transaction   *message,
                      uint8_t             *out);
size_t transaction__pack_to_buffer
                     (const Transaction   *message,
                      ProtobufCBuffer     *buffer);
Transaction *
       transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transaction__free_unpacked
                     (Transaction *message,
                      ProtobufCAllocator *allocator);
/* TransactionList methods */
void   transaction_list__init
                     (TransactionList         *message);
size_t transaction_list__get_packed_size
                     (const TransactionList   *message);
size_t transaction_list__pack
                     (const TransactionList   *message,
                      uint8_t             *out);
size_t transaction_list__pack_to_buffer
                     (const TransactionList   *message,
                      ProtobufCBuffer     *buffer);
TransactionList *
       transaction_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   transaction_list__free_unpacked
                     (TransactionList *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*TransactionHeader_Closure)
                 (const TransactionHeader *message,
                  void *closure_data);
typedef void (*Transaction_Closure)
                 (const Transaction *message,
                  void *closure_data);
typedef void (*TransactionList_Closure)
                 (const TransactionList *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor transaction_header__descriptor;
extern const ProtobufCMessageDescriptor transaction__descriptor;
extern const ProtobufCMessageDescriptor transaction_list__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_transaction_2eproto__INCLUDED */
