/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: batch.proto */

#ifndef PROTOBUF_C_batch_2eproto__INCLUDED
#define PROTOBUF_C_batch_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "transaction.pb-c.h"

typedef struct _BatchHeader BatchHeader;
typedef struct _Batch Batch;
typedef struct _BatchList BatchList;


/* --- enums --- */


/* --- messages --- */

struct  _BatchHeader
{
  ProtobufCMessage base;
  /*
   * Public key for the client that signed the BatchHeader
   */
  char *signer_public_key;
  /*
   * List of transaction.header_signatures that match the order of
   * transactions required for the batch
   */
  size_t n_transaction_ids;
  char **transaction_ids;
};
#define BATCH_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&batch_header__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  _Batch
{
  ProtobufCMessage base;
  /*
   * The serialized version of the BatchHeader
   */
  ProtobufCBinaryData header;
  /*
   * The signature derived from signing the header
   */
  char *header_signature;
  /*
   * A list of the transactions that match the list of
   * transaction_ids listed in the batch header
   */
  size_t n_transactions;
  Transaction **transactions;
  /*
   * A debugging flag which indicates this batch should be traced through the
   * system, resulting in a higher level of debugging output.
   */
  protobuf_c_boolean trace;
};
#define BATCH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&batch__descriptor) \
    , {0,NULL}, (char *)protobuf_c_empty_string, 0,NULL, 0 }


struct  _BatchList
{
  ProtobufCMessage base;
  size_t n_batches;
  Batch **batches;
};
#define BATCH_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&batch_list__descriptor) \
    , 0,NULL }


/* BatchHeader methods */
void   batch_header__init
                     (BatchHeader         *message);
size_t batch_header__get_packed_size
                     (const BatchHeader   *message);
size_t batch_header__pack
                     (const BatchHeader   *message,
                      uint8_t             *out);
size_t batch_header__pack_to_buffer
                     (const BatchHeader   *message,
                      ProtobufCBuffer     *buffer);
BatchHeader *
       batch_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   batch_header__free_unpacked
                     (BatchHeader *message,
                      ProtobufCAllocator *allocator);
/* Batch methods */
void   batch__init
                     (Batch         *message);
size_t batch__get_packed_size
                     (const Batch   *message);
size_t batch__pack
                     (const Batch   *message,
                      uint8_t             *out);
size_t batch__pack_to_buffer
                     (const Batch   *message,
                      ProtobufCBuffer     *buffer);
Batch *
       batch__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   batch__free_unpacked
                     (Batch *message,
                      ProtobufCAllocator *allocator);
/* BatchList methods */
void   batch_list__init
                     (BatchList         *message);
size_t batch_list__get_packed_size
                     (const BatchList   *message);
size_t batch_list__pack
                     (const BatchList   *message,
                      uint8_t             *out);
size_t batch_list__pack_to_buffer
                     (const BatchList   *message,
                      ProtobufCBuffer     *buffer);
BatchList *
       batch_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   batch_list__free_unpacked
                     (BatchList *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*BatchHeader_Closure)
                 (const BatchHeader *message,
                  void *closure_data);
typedef void (*Batch_Closure)
                 (const Batch *message,
                  void *closure_data);
typedef void (*BatchList_Closure)
                 (const BatchList *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor batch_header__descriptor;
extern const ProtobufCMessageDescriptor batch__descriptor;
extern const ProtobufCMessageDescriptor batch_list__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_batch_2eproto__INCLUDED */
