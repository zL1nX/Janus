
# attester

uint8_t ks[] = {0x75, 0xd5, 0x73, 0x97, 0x6a, 0x97, 0x7b, 0xa4, 0x5d, 0xf5, 0xa1, 0x7c, 0x9d, 0x9b, 0xc, 0x66}; // 等价于 communication key / personal key

uint8_t Kg[] = {0xe3, 0x5c, 0x71, 0x60, 0xec, 0x63, 0x85, 0xd1, 0x6f, 0xfb, 0x6d, 0x12, 0xe0, 0x27, 0x67, 0x8b}; // group key, 按理说attester是不需要存的, 因为可以用PUF算出来, 但为了方便也可以hardcode下来

uint8_t att_privkey_attester[] = {0xe3, 0x28, 0x68, 0x33, 0x1f, 0xa8, 0xef, 0x01, 0x38, 0xde, 0x0d, 0xe8, 0x54, 0x78, 0x34, 0x6a, 0xec, 0x5e, 0x39, 0x12, 0xb6, 0x02, 0x9a, 0xe7, 0x16, 0x91, 0xc3, 0x84, 0x23, 0x7a, 0x3e, 0xeb}; // attestation key, 即对测量值进行签名的TEE私钥

uint8_t att_pubkey_attester[] = {0x86, 0xb1, 0xaa, 0x51, 0x20, 0xf0, 0x79, 0x59, 0x43, 0x48, 0xc6, 0x76, 0x47, 0x67, 0x9e, 0x7a, 0xc4, 0xc3, 0x65, 0xb2, 0xc0, 0x13, 0x30, 0xdb, 0x78, 0x2b, 0x0b, 0xa6, 0x11, 0xc1, 0xd6, 0x77, 0x5f, 0x43, 0x76, 0xa2, 0x3e, 0xed, 0x63, 0x36, 0x57, 0xa9, 0x0f, 0x38, 0x5b, 0xa2, 0x10, 0x68, 0xed, 0x7e, 0x29, 0x85, 0x9a, 0x7f, 0xab, 0x09, 0xe9, 0x53, 0xcc, 0x5b, 0x3e, 0x89, 0xbe, 0xba} // 对应的公钥

uint8_t bc_privkey_attester[] = {0x81, 0x5b, 0xae, 0x68, 0xa5, 0x24, 0x3b, 0x36, 0xda, 0x75, 0xc3, 0x82, 0x15, 0xcf, 0x04, 0x5c, 0xf6, 0x4b, 0xf0, 0x67, 0xab, 0x4a, 0x99, 0x46, 0xf6, 0x5b, 0x1a, 0x06, 0x9d, 0x8b, 0xdc, 0x0d} // 作为链节点的自己的私钥

uint8_t bc_pubkey_attester[] = {0xec, 0x6c, 0x6c, 0xad, 0xd3, 0x33, 0xa3, 0xb7, 0x5b, 0xa6, 0x5d, 0xd7, 0x74, 0xb3, 0x9a, 0xf6, 0x2b, 0x34, 0x4a, 0xa3, 0xb8, 0x33, 0xef, 0x85, 0x0d, 0x3c, 0x27, 0x60, 0xb1, 0x26, 0xc4, 0x30, 0xee, 0x2d, 0x3e, 0x44, 0xc3, 0x5d, 0xd6, 0xfb, 0x06, 0xfb, 0xf3, 0xf7, 0x9b, 0xa2, 0x95, 0x72, 0x1e, 0x89, 0xc4, 0x72, 0x00, 0x1a, 0xe3, 0xaa, 0x4b, 0xa5, 0xbc, 0x65, 0xcc, 0xc2, 0x54, 0x25} // 对应的公钥

uint8_t attester_enc[] = {0xd3, 0x6e, 0x2c, 0x94, 0xf8, 0x9d, 0x5a, 0x99, 0xb3, 0x74, 0x39, 0xfd, 0x7c, 0xae, 0xc7, 0xef}; // AES_encrypt(Kg, s), 将对应verifier的personal key进行加密后得到的密文值


## attester的测量值
const uint8_t g_measurement[MEASUREMENT_LEN] = {0x6b, 0xf1, 0xe9, 0xd3, 0x50, 0x8f, 0x83, 0x2b, 0x21, 0x8f, 0x22, 0xae, 0xcc, 0xcc, 0x50, 0x38, 0xb5, 0x1b, 0xd1, 0xd2, 0x29, 0xdc, 0x93, 0x37, 0x65, 0x79, 0x44, 0xcf, 0x19, 0xae, 0xb0, 0x23};
const uint8_t g_puf_measurement[PUF_RESPONESE_LEN] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10}; // RM = PUF(M)
const uint8_t g_hash_puf_measurement[MEASUREMENT_LEN] = {0xf0, 0x5b, 0x5b, 0xd6, 0x60, 0xc5, 0x2e, 0x61, 0x96, 0x91, 0x50, 0xdb, 0x79, 0xcf, 0x5a, 0x88, 0x7d, 0xcb, 0x18, 0x7e, 0x04, 0xc7, 0xbb, 0xe5, 0x42, 0xf4, 0x61, 0x52, 0xbb, 0xb4, 0x8c, 0x2e}; // H(RM||aid||pid)

> RM||aid||pid = 0102030405060708090a0b0c0d0e0f1039353336323363386233383862343435396531336639373864376338343666343030303130303033ff



# verifier

uint8_t s[] = {0xb5, 0xfb, 0xe2, 0x16, 0xe, 0x9a, 0x50, 0x75, 0x23, 0x81, 0x8e, 0x75, 0x35, 0x1f, 0x70, 0x76};

uint8_t Sg[] = {0x27, 0x33, 0xcc, 0x6e, 0xf1, 0x45, 0xdd, 0x9d, 0x4f, 0xc7, 0xf, 0xbb, 0x95, 0xe4, 0xc4, 0xe7};

uint8_t att_privkey_verifier[] = {0xce, 0xf1, 0x47, 0x65, 0x2a, 0xa9, 0x01, 0x62, 0xe1, 0xff, 0xf9, 0xcf, 0x07, 0xf2, 0x60, 0x5e, 0xa0, 0x55, 0x29, 0xca, 0x21, 0x5a, 0x04, 0x35, 0x0a, 0x98, 0xec, 0xc2, 0x4a, 0xa3, 0x43, 0x42};

uint8_t att_pubkey_verifier[] = {0x40, 0x34, 0x12, 0x76, 0x47, 0xbb, 0x7f, 0xda, 0xb7, 0xf1, 0x52, 0x6c, 0x7d, 0x10, 0xbe, 0x8b, 0x28, 0x17, 0x4e, 0x2b, 0xba, 0x35, 0xb0, 0x6f, 0xfd, 0x8a, 0x26, 0xfc, 0x2c, 0x20, 0x13, 0x4a, 0x9e, 0x77, 0x31, 0x99, 0xed, 0xc1, 0xea, 0x79, 0x2b, 0x15, 0x02, 0x70, 0xea, 0x33, 0x17, 0x68, 0x92, 0x86, 0xc9, 0xfe, 0x23, 0x9d, 0xd5, 0xb9, 0xc5, 0xcf, 0xd9, 0xe8, 0x1b, 0x4b, 0x63, 0x2};

uint8_t bc_privkey_verifier[] = {0x93, 0xd0, 0xe6, 0x31, 0x78, 0xb2, 0x6a, 0x01, 0x19, 0xc5, 0x71, 0xcb, 0x7b, 0xe3, 0xfa, 0x0d, 0xb4, 0x6d, 0x85, 0xa1, 0x4d, 0x2b, 0x03, 0x2e, 0x9a, 0xcf, 0xa5, 0xed, 0x88, 0xc8, 0x88, 0xf9}

uint8_t bc_pubkey_verifier[] = {0xfc, 0xf9, 0x12, 0xb6, 0x0c, 0x0d, 0x06, 0x1b, 0xc8, 0x3a, 0x76, 0x3a, 0xe4, 0xd2, 0xf3, 0x9d, 0xab, 0x97, 0x69, 0x9c, 0xcd, 0xa7, 0x38, 0xd7, 0x78, 0x27, 0x6b, 0x74, 0x8d, 0xbd, 0x39, 0x9b, 0x3c, 0xc4, 0x41, 0x5a, 0xb0, 0xaf, 0xee, 0x02, 0xba, 0x9b, 0x71, 0xfa, 0xe8, 0xe9, 0xb9, 0xc2, 0x83, 0xe1, 0xdf, 0x46, 0x92, 0x46, 0x86, 0x72, 0xbe, 0xca, 0x16, 0x48, 0xf6, 0x5f, 0x42, 0x46}

uint8_t verifier_enc[] = {0xbf, 0x69, 0x5b, 0x0f, 0x9a, 0x5a, 0x74, 0x2c, 0x1a, 0xbf, 0xf4, 0x76, 0xab, 0x38, 0x76, 0x13}; // AES_encrypt(Sg, ks), 将attester的personal key加密后的密文




## verifier测量值, 没有PUF, 两个hash
const uint8_t g_measurement[MEASUREMENT_LEN] = {0xd4, 0xdb, 0xa6, 0x5b, 0xf3, 0x32, 0xf5, 0xd6, 0x81, 0x1d, 0x3e, 0x72, 0x70, 0xba, 0xb3, 0x83, 0x3e, 0xba, 0x21, 0x4, 0xef, 0x5d, 0xc1, 0x76, 0x8b, 0xaa, 0xa9, 0x9d, 0xa9, 0x65, 0x67, 0xaf};
const uint8_t g_hash_measurement[MEASUREMENT_LEN] = {0x45, 0x58, 0x71, 0x57, 0x31, 0xe2, 0x3b, 0xad, 0x3b, 0x8a, 0x45, 0x99, 0x49, 0x35, 0x06, 0xc2, 0x1a, 0xf7, 0xc6, 0x7c, 0x24, 0x81, 0x60, 0x11, 0x92, 0x69, 0xc5, 0xb1, 0xde, 0x4d, 0xeb, 0x26}

//  6bf1e9d3508f832b218f22aecccc5038b51bd1d229dc9337657944cf19aeb02338626230636636656239623137643066376432326234353666313231323537643862623063663665623962313764306637643232623435366631323132353764303030323030303300




# 注册时需要上链的数据

- attester
    - attester_enc, g_hash_puf_measurement, att_pubkey_attester
- verifier
    - verifier_enc, g_hash_measurement, att_pubkey_verifier
